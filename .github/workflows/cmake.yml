---
name: CMake

permissions: read-all

on:

  workflow_dispatch:
    inputs:
      os:
        description: 'Operating system'
        required: false
        default: 'Linux'
        type: string
      build_type:
        description: 'Build type (Release, Debug, RelWithDebInfo, etc.)'
        required: false
        default: 'Release'
        type: string
      repository:
        description: 'Repository name with owner. For example, actions/checkout'
        required: false
        default: ''
        type: string
      ref:
        description: 'The branch, tag or SHA to build'
        required: false
        default: ''
        type: string
      artifact_name:
        description: 'Artifact name'
        required: false
        type: string
      run_tests:
        description: 'Run Tests'
        required: false
        default: false
        type: boolean
      no_artifacts:
        description: 'Do not upload artifacts'
        required: false
        default: false
        type: boolean
      dependent_artifact:
        description: 'Name of artifact to treat as dependency'
        required: false
        default: ''
        type: string
      configure_options:
        description: 'Extra options for CMake configure stage'
        required: false
        default: ''
        type: string
      docker_opts:
        description: 'extra options for docker build'
        required: false
        type: string
    secrets:
      token:
        description: 'Personal access token (PAT) used to fetch the repository'
        required: false

  workflow_call:
    inputs:
      os:
        description: 'Operating system'
        required: false
        default: 'Linux'
        type: string
      build_type:
        description: 'Build type (Release, Debug, RelWithDebInfo, etc.)'
        required: false
        default: 'Release'
        type: string
      repository:
        description: 'Repository name with owner. For example, actions/checkout'
        required: false
        default: ''
        type: string
      ref:
        description: 'The branch, tag or SHA to build'
        required: false
        default: ''
        type: string
      artifact_name:
        description: 'Artifact name'
        required: false
        type: string
      run_tests:
        description: 'Run Tests'
        required: false
        default: false
        type: boolean
      no_artifacts:
        description: 'Do not upload artifacts'
        required: false
        default: false
        type: boolean
      dependent_artifact:
        description: 'Name of artifact to treat as dependency'
        required: false
        default: ''
        type: string
      configure_options:
        description: 'Extra options for CMake configure stage'
        required: false
        default: ''
        type: string
      docker_opts:
        description: 'extra options for docker build'
        required: false
        type: string
    secrets:
      token:
        description: 'Personal access token (PAT) used to fetch the repository'
        required: false

jobs:
  cmake:
    name: CMake ${{ inputs.os }} ${{ inputs.build_type }}
    runs-on: [self-hosted, "${{ inputs.os || 'Linux' }}"]
    steps:

      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      - name: Cleanup workspace (Windows)
        if: always() && runner.os == 'Windows'
        run: Remove-Item -Recurse -Force .\*

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: source
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token || github.token }}

      - name: Install dependencies (Linux)
        if: always() && runner.os == 'Linux'
        run: >
          docker build ${{ inputs.docker_opts }}
          -f "source/script/Dockerfile.rhel.build"
          -t vpl_build:rhel
          "source/script"

      - name: Install dependencies (Windows)
        if: always() && runner.os == 'Windows'
        shell: cmd
        run: |
          echo on

          call source\script\bootstrap.bat
          if %errorlevel% neq 0 exit /b %errorlevel%

      - name: Download dependent artifact
        if: inputs.dependent_artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.dependent_artifact }}
          path: deps

      - name: Extract dependent artifact (Linux)
        if: inputs.dependent_artifact && runner.os == 'Linux'
        run: unzip deps/*.zip -d _deps

      - name: Extract dependent artifact (Windows)
        if: inputs.dependent_artifact && runner.os == 'Windows'
        run: Expand-Archive -Force -Path deps\*.zip -DestinationPath _deps

      - name: Configure (Linux)
        if: always() && runner.os == 'Linux'
        run: |
          cat <<'EOL' > configure.sh
          #!/bin/bash
          set -o errexit
          deps_path=$(realpath _deps)
          cmake -B "source/_build" -S "source" \
          -DBUILD_TESTS=${{ inputs.run_tests && 'ON' || 'OFF' }} \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} \
          -DCMAKE_INSTALL_LIBDIR=lib \
          -DCMAKE_PREFIX_PATH=$deps_path \
          ${{ inputs.configure_options }} \
          -DENABLE_WARNING_AS_ERROR=ON
          EOL
          chmod +x configure.sh

          docker run --rm -v $(pwd):/tmp -w /tmp vpl_build:rhel ./configure.sh

      - name: Configure (Windows)
        if: always() && runner.os == 'Windows'
        shell: cmd
        run: |
          @echo off
          if exist _deps (
          pushd _deps
          for /f %%i in ('cd') do set deps_path=%%i
          popd
          )
          @echo on

          cmake -B "source\_build" ^
          -S "source" ^
          -DBUILD_TESTS=${{ inputs.run_tests && 'ON' || 'OFF' }} ^
          -DCMAKE_PREFIX_PATH=%deps_path% ^
          ${{ inputs.configure_options }} ^
          -DENABLE_WARNING_AS_ERROR=ON
          if %errorlevel% neq 0 exit /b %errorlevel%

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          cat <<'EOL' > build.sh
          #!/bin/bash
          set -o errexit
          cmake --build "source/_build" --verbose --parallel $(nproc)
          pushd "source/_build"
          cpack .
          popd
          EOL
          chmod +x build.sh

          docker run --rm -v $(pwd):/tmp -w /tmp vpl_build:rhel ./build.sh

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo on

          cmake --build "source\_build" ^
          --config ${{ inputs.build_type || 'Release' }} ^
          --verbose ^
          --parallel %NUMBER_OF_PROCESSORS%

          if %errorlevel% neq 0 exit /b %errorlevel%

          cmake --build "source\_build" ^
          --config ${{ inputs.build_type || 'Release' }} ^
          --target package

          if %errorlevel% neq 0 exit /b %errorlevel%


      - name: Upload build
        uses: actions/upload-artifact@v4
        if: (success() || failure()) && ! inputs.no_artifacts
        with:
          name: >
            ${{ inputs.artifact_name
            || format('{0}-{1}-build',
            inputs.os || 'Linux',
            inputs.build_type || 'Release') }}
          # path: source/_build/*.zip
          path: source/_build/*-all.zip

      - name: Test (Linux)
        if: runner.os == 'Linux' && inputs.run_tests
        run: |
          cat <<'EOL' > test.sh
          #!/bin/bash
          set -o errexit
          ctest --test-dir "source/_build" \
          -C ${{ inputs.build_type || 'Release' }} \
          --output-on-failure \
          -E .*-test \
          --output-junit Testing/linux.xml
          EOL
          chmod +x test.sh
          docker run --rm -v $(pwd):/tmp -w /tmp vpl_build:rhel ./test.sh

      - name: Test (Windows)
        if: runner.os == 'Windows' && inputs.run_tests
        shell: cmd
        run: |
          echo on

          ctest --test-dir "source\_build" ^
          -C ${{ inputs.build_type || 'Release' }} ^
          --output-on-failure ^
          -E .*-test ^
          --output-junit Testing/windows.xml

          if %errorlevel% neq 0 exit /b %errorlevel%

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: >
          (success() || failure()) && inputs.run_tests && ! inputs.no_artifacts
        with:
          name: >
            ${{ format('{0}-utests', inputs.artifact_name ) }}
          path: source/_build/Testing/*.xml

      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      - name: Cleanup workspace (Windows)
        if: always() && runner.os == 'Windows'
        run: Remove-Item -Recurse -Force .\*
